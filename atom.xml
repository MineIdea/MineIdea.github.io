<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://MineIdea.github.io</id>
    <title>LT&apos;s Blog</title>
    <updated>2020-02-23T15:45:45.051Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://MineIdea.github.io"/>
    <link rel="self" href="https://MineIdea.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://MineIdea.github.io/images/avatar.png</logo>
    <icon>https://MineIdea.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, LT&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[剪绳子]]></title>
        <id>https://MineIdea.github.io/post/github-test/</id>
        <link href="https://MineIdea.github.io/post/github-test/">
        </link>
        <updated>2020-02-23T15:02:18.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2>
<p>给你一根长度为n的绳子，请把绳子剪成整数长的m段（m、n都是整数，n&gt;1并且m&gt;1），每段绳子的长度记为k[0],k[1],...,k[m]。请问k[0]xk[1]x...xk[m]可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。</p>
<h2 id="输入描述">输入描述:</h2>
<pre><code>输入一个数n，意义见题面。（2 &lt;= n &lt;= 60）
</code></pre>
<h2 id="输出描述">输出描述:</h2>
<pre><code>输出答案。
</code></pre>
<p>示例1</p>
<h2 id="输入">输入</h2>
<pre><code>8
</code></pre>
<h2 id="输出">输出</h2>
<pre><code>18
</code></pre>
<p>我看到题目的第一想法就是递归，首先考虑一下特殊情况，当n=1、2、3时，最大乘积分别为1,1,2<br>
n=4也是特殊情况，可以分成2*2，最大乘积为4。n&gt;4时，将绳子分割一定大于本身长度，简单证明一下:</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>∗</mo><mo>(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo>)</mo><mo>−</mo><mi>n</mi><mo>=</mo><mi>n</mi><mo>−</mo><mn>4</mn><mo>&gt;</mo><mn>0</mn><mo>(</mo><mi>n</mi><mo>&gt;</mo><mn>4</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">2*(n-2) - n = n-4 &gt; 0 (n&gt;4)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">4</span><span class="mclose">)</span></span></span></span></span></p>
<p>因此n&gt;4之后都需要将绳子分成若干个2和3的长度，只需要比较是2 * cutRope(n-2)大，还是3 * cutRope(n-3)大。</p>
<p>但要注意一点，我们在绳子长度大于3时，要阻止程序对绳子长度为2、3进行进一步分割，使用Math.max就可以让绳子在长度为2、3时停止分割。</p>
<pre><code class="language-java">import java.lang.Math;
public class Solution {
    public int cutRope(int target) {
        if (target &lt; 4) {
            return target - 1;
        }
        return Math.max(2*Math.max(target-2,cutRope(target-2)),
                                  3*Math.max(target-3,cutRope(target-3)));
    }
}
</code></pre>
]]></content>
    </entry>
</feed>